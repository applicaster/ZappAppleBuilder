# frozen_string_literal: true

require 'spaceship'
require 'json'

import 'FaslaneUpload.rb'
import 'FastfileTest'
import 'BuildTypeFactory.rb'
import 'Enterprise/Types/Client/Client.rb'
import 'Enterprise/Types/Debug/Debug.rb'
import 'Store/Store.rb'
import 'Base/Helpers/AppCenterHelper.rb'
import 'Base/Helpers/ProjectHelper.rb'
import 'Base/Helpers/BaseHelper.rb'

platform :tvos do
  lane :precache do
    scan(
      workspace: 'ZappiOS/ZappiOS.xcworkspace',
      scheme: project_help.scheme,
      buildlog_path: "#{base_helper.circle_artifacts_folder_path}.to_s/precache",
      derived_data_path: project_help.build_path,
      configuration: 'Release'
    )
  end
end

platform :ios do
  lane :precache do
    project_help = ProjectHelper.new
    base_helper = BaseHelper.new
    #       workspace: project_help.xcworkspace_relative_path.to_s,

    # build_app(
    #   workspace: 'ZappiOS/ZappiOS.xcworkspace',
    #   scheme: project_help.scheme,
    #   buildlog_path: "#{base_helper.circle_artifacts_folder_path}.to_s/precache",
    #   derived_data_path: project_help.build_path,
    #   configuration: 'Release',
    #   skip_archive: true,
    #   skip_codesigning: true
    # )

    scan(
      workspace: 'ZappiOS/ZappiOS.xcworkspace',
      scheme: project_help.scheme,
      buildlog_path: "#{base_helper.circle_artifacts_folder_path}.to_s/precache",
      derived_data_path: project_help.build_path,
      configuration: 'Release'
    )
  end

  before_all do

  end

  lane :remove_app_extensions_targets do |options|
    Dir.chdir("#{ENV['PWD'].to_s}"){
      project_name = options[:project_name]
      project_path = "#{project_name}/#{project_name}.xcodeproj"
      project_scheme = project_name
      appExtensions = AppExtensions.new
      unless project_name.to_s.strip.empty?
        appExtensions.remove_app_extensions_targets_from_project(
          project_path: project_path,
          project_scheme: project_scheme
        )
      end
    }
  end 

  lane :prepare_environment do |options|
    set_initial_context
    envHelper = EnvironmentHelper.new
    unless envHelper.bundle_identifier.to_s.strip.empty?
      BuildTypeFactory.new(fastlane: self).prepare_environment(options)
    end
  end

  lane :validate_app_signing do |options|
    set_initial_context
    envHelper = EnvironmentHelper.new
    unless envHelper.bundle_identifier.to_s.strip.empty?
      BuildTypeFactory.new(fastlane: self).perform_signing_validation(options)
    end
  end

  lane :build do |options|
    set_initial_context
    envHelper = EnvironmentHelper.new
    unless envHelper.bundle_identifier.to_s.strip.empty?
      BuildTypeFactory.new(fastlane: self).build(options)
    end
  end
end

def set_initial_context
  set_device_family
  create_temp_keychain
end

def create_temp_keychain
  create_keychain(
    name: keychain_name,
    password: keychain_password,
    unlock: true,
    timeout: false
  )
end

def set_device_family
  puts('Setting device family param')

  device_family = ENV['device_target']
  ENV['DEVICE_FAMILY'] = '1,2'
  ENV['DEVICE_FAMILY'] = '1' if device_family == 'iphone'
  ENV['DEVICE_FAMILY'] = '2' if device_family == 'ipad'
  end

def save_param_to_file(name, value)
  folder_name = "#{ENV['PWD']}/.fastlane_params"
  filename = "#{folder_name}/#{name}"
  Dir.mkdir(folder_name) unless File.exist?(folder_name)
  File.open(filename, 'w') do |f|
    f.write(value)
  end
end

def keychain_name
  'zapp-apple-build.keychain'
end

def keychain_password
  'circle'
end
