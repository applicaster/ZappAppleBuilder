fastlane_require 'dotenv'

platform :ios do

  lane :enterprise do

    setup_enterprise_app_signing()
    prepare_enterprise_app()

    # get identifiers
    identifier = enterprise_app_bundle_identifier
    identifier_notifications = enterprise_app_notifications_bundle_identifier

    # get provisioning profiles specifiers
    main_prov_profile_specifier = "#{ENV["#{identifier}_PROFILE_UDID"]}"
    notifications_prov_profile_specifier = "#{ENV["#{identifier_notifications}_PROFILE_UDID"]}"

    build_path = "#{ENV['PWD']}/build"
    gym(
      workspace: "#{xcworkspace_relative_path}",
      scheme: project_scheme,
      configuration: build_configuration,
      include_bitcode: true,
      include_symbols: true,
      output_directory: "CircleArtifacts/Enterprise",
      buildlog_path: "CircleArtifacts/Enterprise",
      output_name: "#{project_scheme}-Enterprise",
      build_path: build_path,
      derived_data_path: build_path,
      xcargs: "RELEASE_SWIFT_OPTIMIZATION_LEVEL='-Onone' "\
              "-UseModernBuildSystem=NO "\
              "RELEASE_COPY_PHASE_STRIP=NO "\
              "DEBUG_ENABLED_GCC='DEBUG=1' "\
              "DEBUG_ENABLED_SWIFT='-DDEBUG' "\
              "DEBUG_ENABLED_SCRIPTS='Debug' "\
              "PROVISIONING_PROFILE='#{main_prov_profile_specifier}' "\
              "NOTIFICATION_EXTENSION_PROV_PROFILE_SPECIFIER='#{notifications_prov_profile_specifier}' "\
              "DEBUG_INFORMATION_FORMAT='dwarf-with-dsym'",
      export_method: "enterprise",
      export_team_id: enterprise_team_id,
      export_options: {
                  compileBitcode: false,
                  provisioningProfiles: {
                    identifier => "#{main_prov_profile_specifier}",
                    identifier_notifications => "#{notifications_prov_profile_specifier}"
                  }
      }
    )

    # delete temp keychain
    delete_keychain(name: keychain_name)

    copy_artifacts(
			target_path: "CircleArtifacts/Enterprise",
			artifacts: [
			 "~/Library/Logs/gym/#{project_scheme}-#{project_scheme}.log"
			]
    )

    # upload to ms app center
    upload_application(identifier,
      "Enterprise",
      "debug"
    )
  end

  def prepare_enterprise_app()

    # update ms_app_center app secret
    ms_app_center_update_app_secret(enterprise_app_bundle_identifier)

    #update firebase configuration
    firebase_add_configuration_file("enterprise")

    #delete spotlight subscription entitlements if exists
    remove_key_from_entitlements("#{project_name}", "Release", "com.apple.smoot.subscriptionservice")
    #delete sso entitlements if exists
    remove_key_from_entitlements("#{project_name}", "Release", "com.apple.developer.video-subscriber-single-sign-on")

    # update app identifier to the enterprise one
    reset_to_bundle_identifier_placeholder(xcodeproj_path, project_info_plist_inner_path)
    update_app_identifier(
      xcodeproj: xcodeproj_path,
      plist_path: project_info_plist_inner_path,
      app_identifier: enterprise_app_bundle_identifier
    )

    # update project team identifier for all targets
    update_project_team(
      path: xcodeproj_path,
      teamid: enterprise_team_id
    )

    # create main app on developer portal with new identifier
    create_app_on_dev_portal(
      enterprise_username,
      enterprise_team_id,
      enterprise_app_devportal_app_name,
      enterprise_app_bundle_identifier,
      "1"
    )

    # create and save the push notifications certificate in build artifacts
    create_push_certificate(
      enterprise_username,
      enterprise_team_id,
      enterprise_app_devportal_app_name,
      enterprise_app_bundle_identifier,
      accountsAccountId
    )

    # create provisioning profile for the main app
    create_provisioning_profile(
      enterprise_username,
      enterprise_team_id,
      enterprise_team_name,
      enterprise_app_bundle_identifier
    )

    # prepare app extensions
    prepare_enterprise_app_extensions()

    # add debug ribbon
    add_debug_ribbon_to_app_icon
  end

  def setup_enterprise_app_signing()
    create_temp_keychain()
    import_certificate(
      certificate_path: enterprise_credentials_path,
      certificate_password: ENV['KEY_PASSWORD'],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
    sh("bundle exec fastlane fastlane-credentials add --username #{enterprise_username} --password '#{enterprise_password}'")
    ENV['FASTLANE_PASSWORD']=ENV['APPLE_DEV_ENT_PASS']
  end

  def prepare_enterprise_app_extensions()
    prepare_enterprise_app_notification_extension()
  end

  def prepare_enterprise_app_notification_extension()
    # getting the indication if extension is enabled
    notification_service_entension_enabled = sh("echo $(/usr/libexec/PlistBuddy -c \"Print :SupportedAppExtensions:NOTIFICATION_SERVICE_EXTENSION:enterprise_enabled\" #{customizations_folder_path}/FeaturesCustomization.plist 2>/dev/null | grep -c true)")
    if notification_service_entension_enabled.to_i() > 0
      # print notification extension enabled
      sh("echo 'Push Notification extension enabled'")

      # update app identifier, versions of the notification extension
      update_target_info_plist_values(
        notification_service_extension_target_name,
        enterprise_app_notifications_bundle_identifier
      )

      # create app for the notifications
      create_app_on_dev_portal(
        enterprise_username,
        enterprise_team_id,
        enterprise_app_devportal_notifications_app_name,
        enterprise_app_notifications_bundle_identifier,
        "2"
      )
      # create group for app and notification extension
      sh("bundle exec fastlane produce group -g #{enterprise_app_group_name} -n '#{ENV['bundle_identifier']} Group' -u #{enterprise_username} ")
      # add the app and the notification extension to the created group
      sh("bundle exec fastlane produce associate_group #{enterprise_app_group_name} -a #{enterprise_app_bundle_identifier} -u #{enterprise_username} ")
      sh("bundle exec fastlane produce associate_group #{enterprise_app_group_name} -a #{enterprise_app_notifications_bundle_identifier} -u #{enterprise_username} -i 1")
      # create provisioning profile for the notifications app
      create_provisioning_profile(
        enterprise_username,
        enterprise_team_id,
        enterprise_team_name,
        enterprise_app_notifications_bundle_identifier
      )
      # add group to entitlements
      update_group_identifiers(
        "#{project_name}",
        "Release",
        ["#{enterprise_app_group_name}"]
      )

      # update app identifier for to the notification extension
      reset_to_bundle_identifier_placeholder(xcodeproj_path, notification_service_extension_info_plist_inner_path)
      update_app_identifier(
        xcodeproj: xcodeproj_path,
        plist_path: notification_service_extension_info_plist_inner_path,
        app_identifier: enterprise_app_notifications_bundle_identifier
      )

      update_group_identifiers(
        "#{notification_service_extension_target_name}",
        "Release",
        ["#{enterprise_app_group_name}"]
      )
      # change app groups support on project file
      change_system_capability(
        "com.apple.ApplicationGroups.iOS",
        0,
        1
      )
    else
      # print notification extension disabled
      sh("echo 'Push Notification extension disabled'")
      # remove extension from build dependency and scripts step
      remove_app_extensions_from_project(
        notification_service_extension_target_name
      )
      # remove app groups from project entitlements
      update_group_identifiers("#{project_name}", "Release", [])
      # set temp identifier for notification extension
      ENV['identifier_notifications'] = "notification.extension.disabled"
    end
  end

  def add_debug_ribbon_to_app_icon
    sh("sh #{ENV['PWD']}/Scripts/add-debug-ribbon-to-app-icon.sh #{ENV['PWD']} #{project_name} #{platform_name}")
  end

  def enterprise_app_bundle_prefix
      "com.applicaster.ent."
  end

  def enterprise_app_bundle_identifier
      "#{enterprise_app_bundle_prefix}#{ENV["bundle_identifier"]}"
  end

  def enterprise_credentials_path
      "#{ENV['PWD']}/Zapp-Signing/Enterprise/dist.p12"
  end

  def enterprise_username
      "#{ENV['APPLE_DEV_ENT_USER']}"
  end

  def enterprise_password
      "#{ENV['APPLE_DEV_ENT_PASS']}"
  end

  def enterprise_team_id
      "#{ENV['APPLE_DEV_ENT_TEAM_ID']}"
  end

  def enterprise_team_name
      "#{ENV['APPLE_DEV_ENT_TEAM_NAME']}"
  end

  def enterprise_app_devportal_app_name
      "#{ENV['bundle_identifier']}"
  end

  def enterprise_app_devportal_notifications_app_name
      "#{enterprise_app_devportal_app_name}.notifications"
  end

  def enterprise_app_group_name
      "group.#{enterprise_app_bundle_identifier}"
  end

  def enterprise_app_notifications_bundle_identifier
      "#{enterprise_app_bundle_identifier}.#{notification_service_extension_target_name}"
  end

end
