version: 2.1
parameters:
  zapptool-version:
    type: string
    default: "4.2.2"
  general-caching-key:
    type: string
    default: "ZappApple_Cache_1.0.8"
notify:
  webhooks:
    - url: https://zapp.applicaster.com/callbacks/build_status/circleci_builds
references:
  workspace_root: &workspace_root ~/ZappAppleBuilder
  mac_config: &mac_config
    working_directory: *workspace_root
    macos:
      xcode: "12.5.0"
    resource_class: large
    shell: /bin/bash --login -eo pipefail

    environment:
      PROJECT_NAME: "ZappApple"
      SCRIPTS_FOLDER: "Scripts"
      BUILD_PATH: ~/build_debug
      HOMEBREW_NO_AUTO_UPDATE: "1"
      SPACESHIP_SKIP_2FA_UPGRADE: "1"
      sdk_version: "5.1.0-alpha.2"
      
      #fastlane variables
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"

  # https://circleci.com/docs/2.0/add-ssh-key/#adding-multiple-keys-with-blank-hostnames
  configure_ssh_agents: &configure_ssh_agents
    run:
      name: Configure SSH agent
      command: |
        ssh-add -D
        ssh-add ~/.ssh/id_rsa_e764296964691752e4fe5eb70ad60da3

  # https://circleci.com/docs/2.0/gh-bb-integration/#establishing-the-authenticity-of-an-ssh-host
  establishing_authenticity_ssh_host: &establishing_authenticity_ssh_host
    run:
      name: Add public keys to known_hosts
      command: |
        ssh-keyscan gitlab.p7s1.io >> ~/.ssh/known_hosts || exit 0

  add_new_wwdr_intermediate_certificate: &add_new_wwdr_intermediate_certificate
    run:
      name: Add New WWDR Intermediate Certificate
      command: |
        request_url="${BASE_REQUEST_URL}/${sdk_version}/add-wwdr-intermediate-certificate.json"
        values=`curl -s -X GET $request_url`
        lines=$(echo $values | jq -r "to_entries|map(\"\(.value|tostring);\")|@tsv"|tr -d '\t')
        eval $lines

  prepare_build_parameters: &prepare_build_parameters
    run:
      name: Prepare build parameters
      command: |
        values=`curl -s -X GET $build_params_url`
        echo $values | jq -r "to_entries|map(\"export \(.key)='\(.value|tostring)'\")|.[]" | while read i; do echo $i >> $BASH_ENV; done

        source $BASH_ENV

  print_build_parameters: &print_build_parameters
    run:
      name: Print build parameters
      command: |
        echo $app_name
        echo $bundle_identifier
        echo $build_params_url

  #Hack general caching until circle does not support global env variables
  prepare_caching_file: &prepare_caching_file
    run: echo "<< pipeline.parameters.general-caching-key >>" > ~/_caching_file

  prepare_zapptool_version_file: &prepare_zapptool_version_file
    run: echo "<< pipeline.parameters.zapptool-version >>" > ~/_zappToolVersion

  triggered_by_zapp_only: &triggered_by_zapp_only
    run:
      name: Workflow Validation
      command: |
        echo $triggered_by
        if [ "$triggered_by" != "zapp" ]; then
        echo "Skipping a workflow, can not work trigged by zapp only"
             circleci-agent step halt
        fi

  stop_job_triggered_by_zapp: &stop_job_triggered_by_zapp
    run:
      name: Workflow Validation
      command: |
        if [ "$triggered_by" = "zapp" ]; then
        echo "Skipping a workflow, can not work with triggered from zapp"
            circleci-agent step halt
        fi

  gems_cache_key: &gems_cache_key GEMS.1.0-{{ checksum "~/_caching_file" }}-{{ checksum "Gemfile.lock" }}
  restore_gems: &restore_gems
    restore_cache:
      name: Bundler - restore cache
      key: *gems_cache_key

  gems_install: &gems_install
    run:
      name: Bundler - install dependencies
      command: |
        gem install bundler
        bundle check --path=.bundle || bundle install --path=.bundle

  save_gems: &save_gems
    save_cache:
      name: Bundler - save cache
      key: *gems_cache_key
      paths:
        - .bundle

  set_ruby_version: &set_ruby_version
    run:
      name: Set Ruby Version
      command: echo 'chruby ruby-2.5.8' >> ~/.bash_profile

  install_node: &install_node
    run:
      name: install node@12.0.0
      command: |
        request_url="${BASE_REQUEST_URL}/${sdk_version}/install-node.json"
        values=`curl -s -X GET $request_url`
        lines=$(echo $values | jq -r "to_entries|map(\"\(.value|tostring);\")|@tsv"|tr -d '\t')
        eval $lines

  which_ruby: &which_ruby
    run:
      name: Ruby - version
      command: ruby -v

  npm_login: &npm_login
    run:
      name: NPM login
      command: npx npm-shell-login

  npm_cache_key: &npm_cache_key Yarn.1.0-{{ checksum "~/_caching_file" }}-{{ checksum "yarn.lock" }}

  prepare_npm_cache_file: &prepare_npm_cache_file
    run:
      name: "Prepare npm caching file: Copy yarn lock to main folder"
      command: cp $TARGET_FOLDER/yarn.lock yarn.lock

  restore_npm: &restore_npm
    restore_cache:
      name: Restore npm dependencies
      key: *npm_cache_key

  install_npm_dependencies: &install_npm_dependencies
    run:
      name: Install NPM dependencies
      command: |
        cd $TARGET_FOLDER
        yarn

  prepare_application_environment: &prepare_application_environment
    run:
      name: ZappTool - prepare application environment
      command: |
        targetFolder="ZappiOS"
        if [ "$device_target" = apple_tv ]; then
          targetFolder="ZappTvOS"
        fi

        cd $targetFolder
        if [ "$bundle_identifier" ];
        then

          ZAPPTOOL_FLAGS=""
          if [ ! -z "$react_native_packager_root" ];
          then
            HOST_URL=$react_native_packager_root
            ZAPPTOOL_FLAGS="${ZAPPTOOL_FLAGS} -rn ${HOST_URL}"
          fi;

          if [ "$skip_bundle_minification" = true ];
          then
            ZAPPTOOL_FLAGS="${ZAPPTOOL_FLAGS} -sbm"
          fi;

          echo "../ZappTool/ZappTool${ZAPPTOOL_FLAGS}"

          ../ZappTool/ZappTool "${ZAPPTOOL_FLAGS}"
        else
          yarn
        fi
        cd ..

  save_npm: &save_npm
    save_cache:
      name: Saving NPM dependencies
      key: *npm_cache_key
      paths:
        - ZappTvOS/node_modules
        - ZappiOS/node_modules

  prepare_pods_cache_file: &prepare_pods_cache_file
    run:
      name: "Prepare cocoapods caching file: Copy podfile.lock to main folder"
      command: cp $TARGET_FOLDER/Podfile.lock Podfile.lock

  cocoapods_cache_key: &cocoapods_cache_key CocoaPods-2.0-{{ checksum "~/_caching_file" }}-{{ checksum "Podfile.lock" }}

  restore_pods: &restore_pods
    restore_cache:
      key: *cocoapods_cache_key

  vesion_pods: &vesion_pods
    run:
      name: CocoaPods - version
      command: bundle exec pod --version

  install_pods: &install_pods
    run:
      name: CocoaPods - install default dependencies
      command: |
        echo $TARGET_FOLDER
        cd $TARGET_FOLDER && bundle exec pod update && cd ..

  save_pods: &save_pods
    save_cache:
      name: CocoaPods - save cache
      key: *cocoapods_cache_key
      paths:
        - "~/.cocoapods/repos"

  version_xcode: &version_xcode
    run:
      name: Current Xcode version
      command: /usr/bin/xcodebuild -version

  location_xcode: &location_xcode
    run:
      name: Xcode installed location
      command: xcode-select -p

  install_awscli: &install_awscli
    run:
      name: AWSCLI - Installing S3 AWS
      command: |
        request_url="${BASE_REQUEST_URL}/${sdk_version}/install-awscli.json"
        values=`curl -s -X GET $request_url`
        lines=$(echo $values | jq -r "to_entries|map(\"\(.value|tostring);\")|@tsv"|tr -d '\t')
        eval $lines

  zapptool_cache_key: &zapptool_cache_key ZappTool-2.3-{{ checksum "~/_caching_file" }}-{{ checksum "~/_zappToolVersion" }}

  restore_zapptool: &restore_zapptool
    restore_cache:
      name: ZappTool - Restore cache
      key: *zapptool_cache_key

  zapptool_download: &zapptool_download
    run:
      name: ZappTool - Download if needed
      command: |
        if [ ! -d "ZappTool" ]; then
          request_url="${BASE_REQUEST_URL}/${sdk_version}/install-zapptool.json"
          values=`curl -s -X GET $request_url`
          lines=$(echo $values | jq -r "to_entries|map(\"\(.value|tostring);\")|@tsv"|tr -d '\t')
          eval $lines
        else
          echo "ZappTool was cached"
        fi

  save_zapptool: &save_zapptool
    save_cache:
      name: ZappTool - save cache
      key: *zapptool_cache_key
      paths:
        - "ZappTool"

  version_zapptool: &version_zapptool
    run:
      name: ZappTool - version
      command: "ZappTool/ZappTool -v"

  create_zapp_sdk: &create_zapp_sdk
    run:
      name: Creating Zapp SDK
      command: |
        if [ -z "$CIRCLE_TAG" ];
        then
          echo "no tag passing branch name"
          version=$CIRCLE_BRANCH
        else
          version=$CIRCLE_TAG
        fi
        echo "Creating SDK for platform:$ZAPP_SDK_PLATFORM"
        bundle exec rake zapp_sdks:create[$ZAPP_SDK_PLATFORM,$version,$CIRCLE_PROJECT_REPONAME]
        bundle exec rake zapp_sdks:publish_changelog[$ZAPP_SDK_PLATFORM,$version]

  validate_app_signing_debug: &validate_app_signing_debug
    run:
      name: Validate app signing for debug build
      command: bundle exec fastlane ios validate_app_signing type:debug

  validate_app_signing_release: &validate_app_signing_release
    run:
      name: Validate app signing for release build
      command: bundle exec fastlane ios validate_app_signing type:store

  release_zapp_sdk_workflow: &release_zapp_sdk_workflow
    - *prepare_build_parameters
    - *prepare_caching_file
    - checkout
    - *set_ruby_version
    - *restore_gems
    - *gems_install
    - *save_gems
    - *create_zapp_sdk
jobs:
  pre_cache_ios:
    <<: *mac_config
    environment:
      device_target: universal
      TARGET_FOLDER: ZappiOS
    steps:
      - *stop_job_triggered_by_zapp
      - checkout
      - *prepare_caching_file
      - *prepare_zapptool_version_file
      - *prepare_pods_cache_file
      - *prepare_npm_cache_file

      - *restore_zapptool
      - *zapptool_download
      - *save_zapptool
      - *version_zapptool

      - *set_ruby_version
      - *which_ruby
      - *install_node
      - *restore_gems
      - *gems_install
      - *save_gems

      - *npm_login
      - *restore_npm
      - *install_npm_dependencies
      - *save_npm

      - *restore_pods
      - *vesion_pods
      - *install_pods
      - *save_pods

      - *version_xcode
      - *location_xcode

  pre_cache_tvos:
    <<: *mac_config
    environment:
      device_target: apple_tv
      TARGET_FOLDER: "ZappTvOS"
    steps:
      - *stop_job_triggered_by_zapp
      - checkout

      - *prepare_caching_file
      - *prepare_zapptool_version_file
      - *prepare_pods_cache_file
      - *prepare_npm_cache_file

      - *restore_zapptool
      - *zapptool_download
      - *save_zapptool
      - *version_zapptool

      - *set_ruby_version
      - *which_ruby
      - *install_node
      - *restore_gems
      - *gems_install
      - *save_gems

      - *npm_login
      - *restore_npm
      - *install_npm_dependencies
      - *save_npm

      - *restore_pods
      - *vesion_pods
      - *install_pods
      - *save_pods

      - *version_xcode
      - *location_xcode

  build:
    <<: *mac_config
    steps:
      - *triggered_by_zapp_only
      - *prepare_build_parameters
      - *print_build_parameters
      - run:
          name: CocoaPods - install default dependencies
          command: |
            if [ "$device_target" = apple_tv ]; then
              echo 'export TARGET_FOLDER="ZappTvOS"' >> $BASH_ENV
            else
              echo 'export TARGET_FOLDER="ZappiOS"' >> $BASH_ENV
            fi

      # https://blog.lelonek.me/private-dependencies-from-github-in-your-docker-container-92e3b8cbf677
      # https://circleci.com/docs/2.0/add-ssh-key/#adding-ssh-keys-to-a-job
      - add_ssh_keys:
          fingerprints: "e7:64:29:69:64:69:17:52:e4:fe:5e:b7:0a:d6:0d:a3"

      - checkout

      - *configure_ssh_agents
      - *establishing_authenticity_ssh_host
      - *add_new_wwdr_intermediate_certificate
      - *prepare_caching_file
      - *prepare_zapptool_version_file
      - *prepare_pods_cache_file
      - *prepare_npm_cache_file

      - *restore_zapptool
      - *zapptool_download
      - *version_zapptool

      - *set_ruby_version
      - *which_ruby
      - *install_node

      - *restore_gems
      - *gems_install

      - *validate_app_signing_release
      - *validate_app_signing_debug

      - *npm_login
      - *restore_npm

      - *install_awscli

      - *prepare_application_environment
      - *restore_pods
      - *vesion_pods
      - *install_pods
      - *version_xcode
      - *location_xcode
      - deploy:
          name: Prepare Release Build environment
          command: |
            bundle exec fastlane ios prepare_environment type:store
      - deploy:
          name: Release Build
          command: |
            export build_type=release
            bundle exec fastlane ios build type:store
      - deploy:
          name: Prepare Debug Build environment
          command: |
            bundle exec fastlane ios prepare_environment type:debug
      - deploy:
          name: Debug Build
          command: |
            export build_type=debug
            bundle exec fastlane ios build type:debug
      - deploy:
          name: Building development project
          command: |
            if [ "$build_dev_project" = true ]; then
              # compress the app
              env_commit=$(git rev-parse HEAD)
              epoch_time=$(date +%s)
              zipped_project_file_name="${epoch_time}_${env_commit}.zip"
              target="ios"
              if [ "$device_target" = apple_tv ]; then
                target="tvos"
              fi
              # using zip
              echo; echo
              echo "Compressing using zip..."
              zip -rq "${zipped_project_file_name}" -@r < "$(pwd)/dev_project_whitelist_${target}.txt"
              bundle exec rake zapp_sdks:upload_dev_project["$(pwd)/${zipped_project_file_name}"]
            else
              echo "Building standard app, not for external development environment! Step will be skipped"
            fi
      - run:
          name: Publishing builds to Zapp
          command: |
            if [ -z "$bundle_identifier" ]; then
              echo "Bundle identifier NOT set! Publishing builds to Zapp not relevant"
            else
              bundle exec rake publish_to_zapp:update_zapp_version
            fi
      - store_artifacts:
          name: Artifacts - Build logs
          path: /tmp/zapp-build-logs

      - store_artifacts:
          name: Artifacts - Build files
          path: ./CircleArtifacts
      - store_artifacts:
          name: Artifacts - Podfile.lock - collecting from iOS build
          path: ./ZappiOS/Podfile.lock
      - store_artifacts:
          name: Artifacts - Podfile.lock - collecting from tvOS build
          path: ./ZappTvOS/Podfile.lock
      - store_artifacts:
          name: Artifacts - yarn.lock - collecting from iOS build
          path: ./ZappiOS/yarn.lock
      - store_artifacts:
          name: Artifacts - yarn.lock - collecting from tvOS build
          path: ./ZappTvOS/yarn.lock
      - store_artifacts:
          name: Artifacts - Additional build params
          path: ./.build_params
      - store_artifacts:
          name: Artifacts - Validation failure log if exists
          path: ./validation_error.log

  create_ios_mobile_sdk:
    <<: *mac_config
    environment:
      ZAPP_SDK_PLATFORM: ios_for_quickbrick
    steps:
      - *prepare_caching_file
      - checkout
      - *set_ruby_version
      - *restore_gems
      - *gems_install
      - *save_gems
      - *create_zapp_sdk
  create_tvos_sdk:
    <<: *mac_config
    environment:
      ZAPP_SDK_PLATFORM: tvos_for_quickbrick
    steps:
      - *prepare_caching_file
      - checkout
      - *set_ruby_version
      - *restore_gems
      - *gems_install
      - *save_gems
      - *create_zapp_sdk

# Solution two make seperate files for ci https://github.com/samsalisbury/circleci-multi-file-config
workflows:
  version: 2
  build_from_branch_and_tag:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - pre_cache_ios:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - pre_cache_tvos:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - hold_create_ios_mobile_sdk:
          type: approval
          requires:
            - pre_cache_ios
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - create_ios_mobile_sdk:
          requires:
            - hold_create_ios_mobile_sdk
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - hold_create_tvos_sdk:
          type: approval
          requires:
            - pre_cache_tvos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - create_tvos_sdk:
          requires:
            - hold_create_tvos_sdk
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
