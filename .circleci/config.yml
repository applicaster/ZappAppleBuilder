version: 2.1
notify:
  webhooks:
    - url: https://zapp.applicaster.com/callbacks/build_status/circleci_builds
references:
  workspace_root: &workspace_root ~/ZappAppleBuilder
  mac_config: &mac_config
    working_directory: *workspace_root
    macos:
      xcode: "11.4.0"
    shell: /bin/bash --login -eo pipefail
    environment:
      GENERAL_CACHE_KEY: "ZappApple_Cache_1.0.1"
      PROJECT_NAME: "ZappApple"
      SCRIPTS_FOLDER: "Scripts"
      BUILD_PATH: ~/build_debug
      ZAPPTOOL_VERSION: "3.10.0"
      HOMEBREW_NO_AUTO_UPDATE: "1"
      #fastlane variables
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"

  gems_cache_key: &gems_cache_key Bundler-{{ checksum "~/_caching_file" }}-{{ checksum "Gemfile.lock" }}
  restore_gems: &restore_gems
    restore_cache:
      name: Bundler - restore cache
      keys:
        - *gems_cache_key

  gems_install: &gems_install
    run:
      name: Bundler - install dependencies
      command: |
        gem install bundler
        bundle check --path=.bundle || bundle install --path=.bundle

  save_gems: &save_gems
    save_cache:
      name: Bundler - save cache
      key: *gems_cache_key
      paths:
        - /usr/local/bundle

  create_zapp_sdk: &create_zapp_sdk
    run:
      name: Creating Zapp SDK
      command: |
        if [ -z "$CIRCLE_TAG" ];
        then
          echo "no tag passing branch name"
          version=$CIRCLE_BRANCH
        else
          version=$CIRCLE_TAG
        fi
        echo "Creating SDK for platform:$ZAPP_SDK_PLATFORM"
        bundle exec rake zapp_sdks:create[$ZAPP_SDK_PLATFORM,$version,$CIRCLE_PROJECT_REPONAME]
        bundle exec rake zapp_sdks:publish_changelog[$ZAPP_SDK_PLATFORM,$version]

jobs:
  build:
    <<: *mac_config

    steps:
      #Hack general caching until circle does not support global env variables
      - run: echo "$GENERAL_CACHE_KEY" > ~/_caching_file
      - run: echo "$ZAPPTOOL_VERSION" > ~/_zappToolVersion

      - run:
          name: Set Ruby Version
          command: echo 'chruby ruby-2.5.8' >> ~/.bash_profile

      - run:
          name: Ruby - version
          command: ruby -v

      - run:
          name: install node@12.0.0
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo nvm install 12.0.0 >> $BASH_ENV
            echo nvm alias default 12.0.0 >> $BASH_ENV

      - restore_cache:
          keys:
            - ZappTool-{{ checksum "~/_caching_file" }}-{{ checksum "~/_zappToolVersion" }}

      - run:
          name: ZappTool - Download
          command: |
            if [ ! -d "${HOME}/ZappTool" ]; then
              echo "Installing ZappTool"
              curl -L "https://dl.bintray.com/applicaster-ltd/pods/ZappTool_v${ZAPPTOOL_VERSION}.zip" > "${HOME}/ZappTool.zip"
              mkdir ${HOME}/ZappTool
              unzip -o "${HOME}/ZappTool.zip" -d "${HOME}/ZappTool"
              rm -rf "${HOME}/ZappTool.zip"
            else
              echo "ZappTool was cached"
            fi

      - save_cache:
          name: ZappTool - save cache
          key: ZappTool-{{ checksum "~/_caching_file" }}-{{ checksum "~/_zappToolVersion" }}
          paths:
            - "${HOME}/ZappTool"

      - run:
          name: ZappTool - version
          command: "${HOME}/ZappTool/ZappTool -v"

      - *restore_gems
      - *gems_install
      - *save_gems

      - run:
          name: Validate app signing
          command: |
            echo "\n-- Validating app signing --"
            bundle exec fastlane ios validate_app_signing

      # Login NPM
      - run:
          name: NPM login
          command: npx npm-shell-login

      - restore_cache:
          name: Restore npm dependencies
          key: YARN-{{ checksum "~/_caching_file" }}-{{ checksum "ZappiOS/yarn.lock" }}

      - run:
          name: ZappTool - prepare application environment
          command: |
            targetFolder="ZappiOS"
            if [ "$device_target" = apple_tv ]; then
              targetFolder="ZappTvOS"
            fi

            cd $targetFolder
            if [ "$bundle_identifier" ];
            then
              "${HOME}/ZappTool/ZappTool"
            else
              yarn
            fi
            cd ..

      - save_cache:
          name: Saving NPM dependencies
          key: YARN-{{ checksum "~/_caching_file" }}-{{ checksum "ZappiOS/yarn.lock" }}
          paths:
            - ./node_modules

      # Restore Cocoapods cache, save cache on lower level, after pod install
      - restore_cache:
          keys:
            - CocoaPods-{{ checksum "~/_caching_file" }}-{{ .Branch }}-{{ .Revision }}
            - CocoaPods-{{ checksum "~/_caching_file" }}-{{ .Branch }}-
            - CocoaPods-{{ checksum "~/_caching_file" }}-

      - run:
          name: CocoaPods - version
          command: bundle exec pod --version

      # Pod install
      - run:
          name: CocoaPods - install default dependencies
          command: |
            targetFolder="ZappiOS"
            if [ "$device_target" = apple_tv ]; then
              targetFolder="ZappTvOS"
            fi
            cd $targetFolder && bundle exec pod update && cd ..

      # Cache CocoaPods
      - save_cache:
          name: CocoaPods - save cache
          key: CocoaPods-{{ checksum "~/_caching_file" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - "~/.cocoapods/repos/cocoapods-"

      # Set Xcode version
      - run:
          name: Current Xcode version
          command: /usr/bin/xcodebuild -version

      # Print Xcode location
      - run:
          name: Xcode installed location
          command: xcode-select -p

      - deploy:
          name: Prepare Build environment
          command: |
            bundle exec fastlane ios prepare_environment

      - deploy:
          name: Build App
          command: |
            bundle exec fastlane ios build

      - deploy:
          name: Building development project
          command: |
            if [ "$build_dev_project" = true ]; then	
              # compress the app	
              env_commit=$(git rev-parse HEAD)	
              epoch_time=$(date +%s)	
              zipped_project_file_name="${epoch_time}_${env_commit}.zip"	
              target="ios"	
              if [ "$device_target" = apple_tv ]; then	
                target="tvos"	
              fi	
              # using zip	
              echo; echo	
              echo "Compressing using zip..."	
              zip -rq "${zipped_project_file_name}" -@r < "$(pwd)/dev_project_whitelist_${target}.txt"	
              bundle exec rake zapp_sdks:upload_dev_project["$(pwd)/${zipped_project_file_name}"]	
            else	
              echo "Building standard app, not for external development environment! Step will be skipped"	
            fi

      - run:
          name: Publishing builds to Zapp
          command: |
            if [ -z "$bundle_identifier" ]; then
              echo "Bundle identifier NOT set! Publishing builds to Zapp not relevant"
            else
              bundle exec rake publish_to_zapp:update_zapp_version
            fi

      # Temporary removed until will not be fully prepared
      # - deploy:
      #     name: Building Zapp-App - Tests
      #     command: |
      #       if [ -z "$bundle_identifier" ]; then
      #         echo "Test will be started"
      #         bundle exec fastlane ios test
      #       fi

      - store_artifacts:
          path: ./CircleArtifacts

  create_ios_mobile_sdk:
    <<: *mac_config
    environment:
      ZAPP_SDK_PLATFORM: ios_for_quickbrick
    steps:
      - checkout
      - *restore_gems
      - *gems_install
      - *save_gems
      - *create_zapp_sdk

  create_tvos_sdk:
    <<: *mac_config
    environment:
      ZAPP_SDK_PLATFORM: tvos_for_quickbrick
    steps:
      - checkout
      - *restore_gems
      - *gems_install
      - *save_gems
      - *create_zapp_sdk

workflows:
  version: 2
  build_from_branch_and_tag:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - hold_create_ios_mobile_sdk:
          type: approval
          requires:
            - build
      - create_ios_mobile_sdk:
          requires:
            - hold_create_ios_mobile_sdk
      - hold_create_tvos_sdk:
          type: approval
          requires:
            - build
      - create_tvos_sdk:
          requires:
            - hold_create_tvos_sdk
