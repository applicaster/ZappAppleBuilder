version: 2.1
parameters:
  image-tag:
    type: ZAPPTOOL_VERSION
    default: "3.10.0"
notify:
  webhooks:
    - url: https://zapp.applicaster.com/callbacks/build_status/circleci_builds
references:
  workspace_root: &workspace_root ~/ZappAppleBuilder
  mac_config: &mac_config
    working_directory: *workspace_root
    macos:
      xcode: "11.4.0"
    shell: /bin/bash --login -eo pipefail

    environment:
      PROJECT_NAME: "ZappApple"
      SCRIPTS_FOLDER: "Scripts"
      BUILD_PATH: ~/build_debug
      HOMEBREW_NO_AUTO_UPDATE: "1"
      #fastlane variables
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"

  #Hack general caching until circle does not support global env variables
  prepare_caching_file: &prepare_caching_file
    run: echo "ZappApple_Cache_1.0.3" > ~/_caching_file

  zapptool_version: &zapptool_version
  prepare_zapptool_version_file: &prepare_zapptool_version_file
    run: echo "<< pipeline.parameters.ZAPPTOOL_VERSION >>" > ~/_zappToolVersion

  stop_job_triggered_by_zapp: &stop_job_triggered_by_zapp
    run:
      name: Workflow Validation
      command: |
        if [ "$triggered_by" = "zapp" ]; then
        echo "Skipping a workflow, can not work with triggered from zapp"
            circleci-agent step halt
        fi

  gems_cache_key: &gems_cache_key GEMS.1-{{ checksum "~/_caching_file" }}-{{ checksum "Gemfile.lock" }}
  restore_gems: &restore_gems
    restore_cache:
      name: Bundler - restore cache
      key: *gems_cache_key

  gems_install: &gems_install
    run:
      name: Bundler - install dependencies
      command: |
        gem install bundler
        bundle check --path=.bundle || bundle install --path=.bundle

  save_gems: &save_gems
    save_cache:
      name: Bundler - save cache
      key: *gems_cache_key
      paths:
        - .bundle

  set_ruby_version: &set_ruby_version
    run:
      name: Set Ruby Version
      command: echo 'chruby ruby-2.5.8' >> ~/.bash_profile

  install_node: &install_node
    run:
      name: install node@12.0.0
      command: |
        set +e
        touch $BASH_ENV
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
        echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
        echo nvm install 12.0.0 >> $BASH_ENV
        echo nvm alias default 12.0.0 >> $BASH_ENV

  whitch_ruby: &whitch_ruby
    run:
      name: Ruby - version
      command: ruby -v

  npm_login: &npm_login
    run:
      name: NPM login
      command: npx npm-shell-login

  npm_cache_key_ios: &npm_cache_key_ios Yarn-1-{{ checksum "~/_caching_file" }}-{{ checksum "ZappiOS/yarn.lock" }}
  npm_cache_key_tvos: &npm_cache_key_tvos Yarn-1-{{ checksum "~/_caching_file" }}-{{ checksum "ZappTvOS/yarn.lock" }}

  restore_npm_ios: &restore_npm_ios
    restore_cache:
      name: Restore npm dependencies ios
      keys: *npm_cache_key_ios

  restore_npm_tvos: &restore_npm_tvos
    restore_cache:
      name: Restore npm dependencies tvos
      key: *npm_cache_key_tvos

  install_npm_dependencies: &install_npm_dependencies
    run:
      name: Install NPM dependencies
      command: |
        # targetFolder="ZappiOS"
        # if [ "$device_target" = apple_tv ]; then
        #   targetFolder="ZappTvOS"
        # fi

        cd $target_folder
        yarn

  save_npm_ios: &save_npm_ios
    save_cache:
      name: Saving NPM dependencies
      key: *npm_cache_key_ios
      paths:
        - ./ZappiOS/node_modules

  save_npm_tvos: &save_npm_tvos
    save_cache:
      name: Saving NPM dependencies
      key: *npm_cache_key_tvos
      paths:
        - ./ZappTvOS/node_modules

  cocoapods_cache_key_ios: &cocoapods_cache_key_ios CocoaPods-1-{{ checksum "~/_caching_file" }}-{{ checksum "ZappiOS/Podfile.lock" }}
  cocoapods_cache_key_tvos: &cocoapods_cache_key_tvos CocoaPods-1-{{ checksum "~/_caching_file" }}-{{ checksum "ZappTvOS/Podfile.lock" }}

  restore_pods_ios: &restore_pods_ios
    restore_cache:
      key: *cocoapods_cache_key_ios

  restore_pods_tvos: &restore_pods_tvos
    restore_cache:
      key: *cocoapods_cache_key_tvos

  vesion_pods: &vesion_pods
    run:
      name: CocoaPods - version
      command: bundle exec pod --version

  install_pods: &install_pods
    run:
      name: CocoaPods - install default dependencies
      command: |
        # targetFolder="ZappiOS"
        # if [ "$device_target" = apple_tv ]; then
        #   targetFolder="ZappTvOS"
        # fi
        cd $target_folder && bundle exec pod update && cd ..

  save_pods_ios: &save_pods_ios
    save_cache:
      name: CocoaPods - save cache ios
      key: *cocoapods_cache_key_ios
      paths:
        - "~/.cocoapods/repos"

  save_pods_tvos: &save_pods_tvos
    save_cache:
      name: CocoaPods - save cache tvos
      key: *cocoapods_cache_key_tvos
      paths:
        - "~/.cocoapods/repos"

  version_xcode: &version_xcode
    run:
      name: Current Xcode version
      command: /usr/bin/xcodebuild -version

  location_xcode: &location_xcode
    run:
      name: Xcode installed location
      command: xcode-select -p

  zapptool_cache_key: &zapptool_cache_key ZappTool-1.0-{{ checksum "~/_caching_file" }}-{{ checksum "~/_zappToolVersion" }}

  restore_zapptool: &restore_zapptool
    restore_cache:
      name: ZappTool - Restore cache
      key: *zapptool_cache_key

  zapptool_download: &zapptool_download
    run:
      name: ZappTool - Download if needed
      command: |
        if [ ! -d "ZappTool" ]; then
          echo "Installing ZappTool"
          curl -L "https://dl.bintray.com/applicaster-ltd/pods/ZappTool_v${ZAPPTOOL_VERSION}.zip" > "$HOME/ZappTool.zip"
          mkdir $HOME/ZappTool
          unzip -o "$HOME/ZappTool.zip" -d "$HOME/ZappTool"
          rm -rf "$HOME/ZappTool.zip"
        else
          echo "ZappTool was cached"
        fi

  save_zapptool: &save_zapptool
    save_cache:
      name: ZappTool - save cache
      key: zapptool_cache_key
      paths:
        - "$HOME/ZappTool"

  version_zapptool: &version_zapptool
    run:
      name: ZappTool - version
      command: "$HOME/ZappTool/ZappTool -v"

  create_zapp_sdk: &create_zapp_sdk
    run:
      name: Creating Zapp SDK
      command: |
        if [ -z "$CIRCLE_TAG" ];
        then
          echo "no tag passing branch name"
          version=$CIRCLE_BRANCH
        else
          version=$CIRCLE_TAG
        fi
        echo "Creating SDK for platform:$ZAPP_SDK_PLATFORM"
        bundle exec rake zapp_sdks:create[$ZAPP_SDK_PLATFORM,$version,$CIRCLE_PROJECT_REPONAME]
        bundle exec rake zapp_sdks:publish_changelog[$ZAPP_SDK_PLATFORM,$version]

  release_zapp_sdk_workflow: &release_zapp_sdk_workflow
    - *prepare_caching_file
    - checkout
    - *set_ruby_version
    - *restore_gems
    - *gems_install
    - *save_gems
    - *create_zapp_sdk
jobs:
  # build:
  #   <<: *mac_config

  #   steps:
  #     - *prepare_caching_file
  #     - *prepare_zapptool_version_file
  #     - checkout

  #     - *set_ruby_version
  #     - *whitch_ruby
  #     - *install_node
  # - *restore_zapptool
  # - *zapptool_download
  # - *save_zapptool
  # - *version_zapptool

  #     - *restore_gems
  #     - *gems_install
  #     - *save_gems

  #     - run:
  #         name: Validate app signing
  #         command: |
  #           echo "\n-- Validating app signing --"
  #           bundle exec fastlane ios validate_app_signing

  #     - *npm_login
  #     - *restore_npm

  #     - run:
  #         name: ZappTool - prepare application environment
  #         command: |
  #           targetFolder="ZappiOS"
  #           if [ "$device_target" = apple_tv ]; then
  #             targetFolder="ZappTvOS"
  #           fi

  #           cd $targetFolder
  #           if [ "$bundle_identifier" ];
  #           then
  #             "$HOME/ZappTool/ZappTool"
  #           else
  #             yarn
  #           fi
  #           cd ..

  #     - *save_npm

  #     - *restore_pods
  #     - *vesion_pods
  #     - *install_pods
  #     - *save_pods

  #     - *version_xcode
  #     - *location_xcode

  #     - deploy:
  #         name: Prepare Build environment
  #         command: |
  #           bundle exec fastlane ios prepare_environment

  #     - deploy:
  #         name: Build App
  #         command: |
  #           bundle exec fastlane ios build

  #     - deploy:
  #         name: Building development project
  #         command: |
  #           if [ "$build_dev_project" = true ]; then
  #             # compress the app
  #             env_commit=$(git rev-parse HEAD)
  #             epoch_time=$(date +%s)
  #             zipped_project_file_name="${epoch_time}_${env_commit}.zip"
  #             target="ios"
  #             if [ "$device_target" = apple_tv ]; then
  #               target="tvos"
  #             fi
  #             # using zip
  #             echo; echo
  #             echo "Compressing using zip..."
  #             zip -rq "${zipped_project_file_name}" -@r < "$(pwd)/dev_project_whitelist_${target}.txt"
  #             bundle exec rake zapp_sdks:upload_dev_project["$(pwd)/${zipped_project_file_name}"]
  #           else
  #             echo "Building standard app, not for external development environment! Step will be skipped"
  #           fi

  #     - run:
  #         name: Publishing builds to Zapp
  #         command: |
  #           if [ -z "$bundle_identifier" ]; then
  #             echo "Bundle identifier NOT set! Publishing builds to Zapp not relevant"
  #           else
  #             bundle exec rake publish_to_zapp:update_zapp_version
  #           fi

  #     # Temporary removed until will not be fully prepared
  #     # - deploy:
  #     #     name: Building Zapp-App - Tests
  #     #     command: |
  #     #       if [ -z "$bundle_identifier" ]; then
  #     #         echo "Test will be started"
  #     #         bundle exec fastlane ios test
  #     #       fi

  #     - store_artifacts:
  #         path: ./CircleArtifacts

  pre_cache_ios:
    <<: *mac_config
    environment:
      device_target: universal
      target_folder: ZappiOS
    steps:
      - *stop_job_triggered_by_zapp
      - checkout

      # Can be gerneral workflow
      - *prepare_caching_file
      - *prepare_zapptool_version_file

      # Can be gerneral workflow, download and cashe
      - *restore_zapptool
      - *zapptool_download
      - *save_zapptool
      - *version_zapptool

      # # Can be base workflow
      #   - *set_ruby_version
      #   - *whitch_ruby
      #   - *install_node
      #   - *restore_gems
      #   - *gems_install
      #   - *save_gems

      #   # Can be logged it on top worfglow
      #   - *npm_login

      #   - *restore_npm_ios
      #   - *install_npm_dependencies
      #   - *save_npm_ios

      #   - *restore_pods_ios
      #   - *vesion_pods
      #   - *install_pods
      #   - *save_pods_ios

      #   - *version_xcode
      #   - *location_xcode

      # - deploy:
      #     name: Building Zapp-App - Tests
      #     command: |
      #       if [ -z "$bundle_identifier" ]; then
      #         echo "Test will be started"
      #         bundle exec fastlane ios precache
      #       fi

      # - run:
      #     name: Pushing prebuilding project
      #     command: |
      #       git add .
      #       git commit -m "Saving precached project"
      #       git push origin $CIRCLE_BRANCH

      - store_artifacts:
          path: ./CircleArtifacts

  # create_ios_mobile_sdk:
  #   <<: *mac_config
  #   environment:
  #     ZAPP_SDK_PLATFORM: ios_for_quickbrick
  #   steps:
  #     - *prepare_caching_file
  #     - checkout
  #     - *set_ruby_version
  #     - *restore_gems
  #     - *gems_install
  #     - *save_gems
  #     - *create_zapp_sdk
  # create_tvos_sdk:
  #   <<: *mac_config
  #   environment:
  #     ZAPP_SDK_PLATFORM: tvos_for_quickbrick
  #   steps:
  #     - *prepare_caching_file
  #     - checkout
  #     - *set_ruby_version
  #     - *restore_gems
  #     - *gems_install
  #     - *save_gems
  #     - *create_zapp_sdk
# Solution two make seperate files for ci https://github.com/samsalisbury/circleci-multi-file-config
workflows:
  version: 2
  build_from_branch_and_tag:
    jobs:
      - pre_cache_ios:
          filters:
            # Change Branch to master only
            branches:
              only: /.*/
      # - build:
      #     filters:
      #       tags:
      #         only: /.*/
      # - hold_create_ios_mobile_sdk:
      #     type: approval
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/
      # - create_ios_mobile_sdk:
      #     requires:
      #       - hold_create_ios_mobile_sdk
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/
      # - hold_create_tvos_sdk:
      #     type: approval
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/
      # - create_tvos_sdk:
      #     requires:
      #       - hold_create_tvos_sdk
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/
